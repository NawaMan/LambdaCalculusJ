
group   = theGroup
version = theVersion

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = theSourceCompatibility
targetCompatibility = theTargetCompatibility

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    // == Test ==
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly    'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

// TEST

test {
    useJUnitPlatform()
}

// IDE

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

// Add Javadoc JAR and sources JAR to artifact
task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// Building/Publishing

ext {
    isSnapshotVersion = project.version.endsWith("-SNAPSHOT")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            artifact sourceJar
            artifact javadocJar
            
            pom {
                name        = project_name
                description = project_desc
                url         = project_link
                licenses {
                    license {
                        name = license_name
                        url  = license_link
                    }
                }
                developers {
                    developer {
                        id    = developer_id
                        name  = developer_name
                        email = developer_email
                    }
                }
                scm {
                    connection          = 'scm:git:git://' + code_repository + '.git'
                    developerConnection = 'http://' + code_repository
                    url                 = 'http://' + code_repository + '/tree/master'
                }
            }
        }
    }
    
    repositories {
        maven {
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
            
            if (isSnapshotVersion) {
                url artifact_repository + "/content/repositories/snapshots/"
            } else {
                url artifact_repository + "/service/local/staging/deploy/maven2/"
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    
    options {
        setMemberLevel JavadocMemberLevel.PUBLIC
        setAuthor true
        
        links "https://docs.oracle.com/javase/11/docs/api/"
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters"
        options.compilerArgs << "-Xlint:unchecked"
        options.incremental = true
    }
}

tasks.withType(Javadoc).all { enabled = false }

// Deploying
artifacts {
    archives javadocJar, sourceJar
}

archivesBaseName = theProject

// == Annotation processor

task compileAnnotationProcessor (type: JavaCompile) {
    options.compilerArgs << "-proc:none"
    options.incremental = true
    
    source               = file("src/main/annotationprocessor")
    destinationDirectory = file('build/classes/java/main')
    classpath            = sourceSets.main.compileClasspath
}

compileJava.dependsOn                                  compileAnnotationProcessor
publishMavenJavaPublicationToMavenLocal.dependsOn      javadocJar
publishMavenJavaPublicationToMavenRepository.dependsOn javadocJar